// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class ContractDeployed extends ethereum.Event {
  get params(): ContractDeployed__Params {
    return new ContractDeployed__Params(this);
  }
}

export class ContractDeployed__Params {
  _event: ContractDeployed;

  constructor(event: ContractDeployed) {
    this._event = event;
  }

  get deployer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get timestamp(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get blockNumber(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class DataStored extends ethereum.Event {
  get params(): DataStored__Params {
    return new DataStored__Params(this);
  }
}

export class DataStored__Params {
  _event: DataStored;

  constructor(event: DataStored) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get data(): string {
    return this._event.parameters[1].value.toString();
  }

  get timestamp(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get dataType(): string {
    return this._event.parameters[3].value.toString();
  }

  get entryId(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get blockNumber(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get dataHash(): Bytes {
    return this._event.parameters[6].value.toBytes();
  }
}

export class DataStorage__dataEntriesResult {
  value0: Address;
  value1: string;
  value2: BigInt;
  value3: string;
  value4: BigInt;
  value5: BigInt;
  value6: Bytes;

  constructor(
    value0: Address,
    value1: string,
    value2: BigInt,
    value3: string,
    value4: BigInt,
    value5: BigInt,
    value6: Bytes,
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromString(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromString(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromFixedBytes(this.value6));
    return map;
  }

  getUser(): Address {
    return this.value0;
  }

  getData(): string {
    return this.value1;
  }

  getTimestamp(): BigInt {
    return this.value2;
  }

  getDataType(): string {
    return this.value3;
  }

  getEntryId(): BigInt {
    return this.value4;
  }

  getBlockNumber(): BigInt {
    return this.value5;
  }

  getDataHash(): Bytes {
    return this.value6;
  }
}

export class DataStorage extends ethereum.SmartContract {
  static bind(address: Address): DataStorage {
    return new DataStorage("DataStorage", address);
  }

  getDataCount(): BigInt {
    let result = super.call("getDataCount", "getDataCount():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getDataCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getDataCount", "getDataCount():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  dataEntries(param0: BigInt): DataStorage__dataEntriesResult {
    let result = super.call(
      "dataEntries",
      "dataEntries(uint256):(address,string,uint256,string,uint256,uint256,bytes32)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );

    return new DataStorage__dataEntriesResult(
      result[0].toAddress(),
      result[1].toString(),
      result[2].toBigInt(),
      result[3].toString(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toBytes(),
    );
  }

  try_dataEntries(
    param0: BigInt,
  ): ethereum.CallResult<DataStorage__dataEntriesResult> {
    let result = super.tryCall(
      "dataEntries",
      "dataEntries(uint256):(address,string,uint256,string,uint256,uint256,bytes32)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new DataStorage__dataEntriesResult(
        value[0].toAddress(),
        value[1].toString(),
        value[2].toBigInt(),
        value[3].toString(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toBytes(),
      ),
    );
  }
}

export class StoreDataCall extends ethereum.Call {
  get inputs(): StoreDataCall__Inputs {
    return new StoreDataCall__Inputs(this);
  }

  get outputs(): StoreDataCall__Outputs {
    return new StoreDataCall__Outputs(this);
  }
}

export class StoreDataCall__Inputs {
  _call: StoreDataCall;

  constructor(call: StoreDataCall) {
    this._call = call;
  }

  get data(): string {
    return this._call.inputValues[0].value.toString();
  }

  get dataType(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class StoreDataCall__Outputs {
  _call: StoreDataCall;

  constructor(call: StoreDataCall) {
    this._call = call;
  }
}
